■ PART001
Q1. mvc 란?
- 서로 영향 없이 쉽게 고칠 수 있는 애플리케이션
- m : model
- v : view
- c : controller

Q2. mvc1 vs mvc2란?
- mvc1 : controller 역할을 jsp가 담당, 스파게티 소스(섞여서 들어감)
- mvc2 : controller 역할을 servlet이 담당

Q3. DBCP란?
- 분산응용프로그램
- db커넥션 객체를 미리 (pool)에 생성해두고 사용
- 데이터베이스 과부하 줄이기

Q4. jsp는 ( java ) + ( html )
     mvc에서의 역할은?  view

Q5. servlet은 ( java )
     mvc에서의 역할은?  controller

Q6. DBCP를 설정하는 방법을 설명하시오.
1. jar 파일 3개 다운로드 - dbcp, collections, pool
2. Server - [server.xml]  pool 설정 <Resources /> 추가
3. 진행하는 프로젝트 - [webapp] - [WEB-INF] - web.xml <resources-ref> 추가
4. test 파일 만들기

Q7. dynamic web project에서 jsp가 위치하는 영역은 ( webapp ),
     servlet이 위치하는 영역은 ( Java Resources ),
     라이브러리들 .jar 파일들이 들어가는 위치는 ( [WEB-INF] - lib )

Q8. request가 오면 ( [WEB-INF] - web.xml ) 파일을 참고해서 controller를 찾는다.


Q9. 로그인 후 id를 유지하려고하면 ( session ) 를 이용한다.
     셋팅이름은 username, 값은 name변수로 지정하시오.
     session.setAttribute("username", name);

Q10. application scope의 범위
       application > session > request > pageContext


20250328_복습문제
Q11. 데이터베이스 언어인 dml을 설명
- crud
- 데이터 조작어(Data Manipulation Language)
- insert, select, update, delete

Q12. PreparedStatement에서 sql 문 실행시
       insert, update, delete 에서는 ( executeUpdate )를 사용,
       select에서는 ( executeQuery )를 사용한다.

Q13. frontcontroller 패턴을 설명하시오
   1. mvc(model view controller)
   2. mvc1 - jsp가 controller 역할
   3. mvc2 - servlet이 controller 역할
   4. frontcontroller - 클라이언트가 보낸 요청을 받아서 공통작업(인증, 권한)을 먼저 수행
		   적절한 세부 controller에게 작업을 위임 (처리 + 뷰 선택)

Q14. *.do를 설정하려고 한다. servlet의 경로를 가져오는 request메서드는?
   방법1. @WebServlet("*.do")  Servlet - 테스트(WebServlet이 한 개라면 web.xml에 등록할 필요 없음)
   방법2. web.xml - 배포관리용도
      <servlet></servlet>
      <servlet-mapping></servlet-mapping>

Q15. 다형성이란?
    - 한가지 자료형으로 여러자료형을 관리하려고
    - 부모자료형으로 자식자료형을 관리

Q16. request/response 유지하고 경로를 숨기고 다른화면으로 넘어가는 것은?
    // dispatcher
    request.getRequestDispatcher("경로").forward(request, response);

Q17. request/response 유지 안 되고 다른화면으로 넘어가는 3가지 방법은?
    // 1. sendRedirect
    response.sendRedirect("경로");

    // 2. location.href  주소표시창 줄 바꾸기
    // 3. meta http-equiv='refresh'  새로고침
    out.println("<script>alert('알림창'); location.href='경로';</script>);
    out.println("<meta http-equiv='refresh' content='몇초; url='경로'>");

Q18. 다음과 같이 경로를 넘어가려고 한다.
       request/response 유지 안 되고 다른화면으로 넘어가는 3가지 방법 중 alert가 처리 안 되는 것은?
    out.println("<script>alert('알림창');</script>");
    response.sendRedirect("경로");



■ PART002
PROJECT (1) 셋팅
#1, frontcontroller board 게시판완성
#2. 개발자사이트 api + ajax
#3. [숙제] - api 2개 이상 / upgrade 기능업그레이드


1) dynamic web project - JOAbooks
2) inc - header/footer
3) error page 설정 - 404, 500
4) dbcp 연동


PROJECT (2) MODEL
DB : table명 - board
글번호 bno           int(long)        not null        auto_increment primary key
글제목 btitle         varchar(1000)  not null
글내용 bcontent    text              not null
글쓴이 bname       varchar(100)    not null
조회수 bhit           int                                default 0
글쓴날짜 bdate      timestamp     not null        default current_timestamp
아이피 bip            varchar(100)   not null
32bit/128bit

create table board(
bno int not null auto_increment primary key,
btitle varchar(1000) not null,
bcontent text not null,
bname varchar(100) not null,
bhit int default 0,
bdate timestamp not null default now(),  current_timestamp
bip varchar(100) not null);

-- 선택사항 : 글비밀번호 bpass

Dto           : [com.company.domain]      - BoardVO      private
DBManager : [com.company.dbmanager] - DBManager
Dao          : [com.company.dao]           - BoardDao
------------------------------------------------------------------------------------------------
  글쓰기 - insert into board (btitle, bcontent, bname, bip) values (?, ?, ?, ?)
  최신글읽기 - select * from board order by bno desc
  해당글읽기 - select * from board where bno = ?
  조회수증가 - update board set bhit=bhit+1 where bno=?
  해당글수정폼 - select * from board where bno=?
  해당글수정기능 - update board set btitle=?, bcontent=? where bno=?
  해당글삭제 - delete from board where bno=?

------------------------------------------------------------------------------------------------
참고1)
executeQuery - select ( 표 )
executeUpdate - insert, update, delete ( 실행줄수 )

참고2)
리턴값 메서드명() {}

  1. 글쓰기            - insert into board (btitle, bcontent, bname, bip) values (?, ?, ?, ?)
      public int insert( BoardVO vo ) { return 0; }

  2. 최신글읽기      - select * from board order by bno desc
      public ArrayList<BoardVO> selectAll(){ return null; }

  3. 해당글읽기 / 해당글수정폼      - select * from board where bno = ?
      public BoardVO select( int bno ) { return null; }

  4. 조회수증가      - update board set bhit = bhit + 1 where bno = ?
      public int updateHit( int bno ){ return 0; }

  5. 해당글수정기능 - update board set btitle = ?, bcontent = ? where bno = ?
      public int update( BoardVO vo ){ return 0; }

  6. 해당글삭제       - delete from board where bno = ?
      public int delete( int bno ){ return 0; }


■ PART003
FrontController

[클라이언트 요청]   
↓
index.jsp  ->  *.do   [FrontController]
       ㄴ  /list.do           - C:전체리스트        BList        /                            V:list.jsp 
       ㄴ  /write_view.do - C:X                                                               V:write.jsp 
       ㄴ  /write.do        - C:글삽입             BWrite(알림창- 성공/실패) /          V: /list.do
       ㄴ  /detail.do      - C:해당번호 상세보기  BDetail(조회수올리기/해당글상세) V:detail.jsp
       ㄴ  /edit_view.do  - C:해당번호 글수정폼  BEditView(해당글상세)              V:edit.jsp
       ㄴ  /edit.do       - C:해당번호 글수정기능 BEdit(해당글수정)                    V: /detail.do 
       ㄴ  /delete.do     - C:해당번호 글삭제기능 BDelete(해당글삭제)                V: /list.do

■ PART004
2. Service
    [com.company.service]

        <<interface>> BoardService   - exec(request, response)   
   ↑             ↑            ↑            ↑            ↑           ↑  
   BList   BWrite        BDetail     BEditView     BEdit       BDelete     <<Class>>

>   BList     전체리스트   -  dao.list()
>   BWrite    글삽입       -  dao.insert(dto)  / 알림창- 성공/실패
>   BDetail   상세보기     -  dao.updateHit(dto) , dao.detail(dto)
>   BEditView 글수정폼   -  dao.detail(dto)
>   BEdit     글수정        -  dao.update(dto)  / 알림창- 성공/실패
>   BDelete   해당글삭제-  dao.delete(dto)  / 알림창- 성공/실패
  
http://localhost:8080/JOAbooks/list.do


■ PART005 필요기능
1. el/jstl
> el
  - 표현식( 출력 구문 )
  - <%= %>
  - ${  }

>jstl ( JavaServer page Standard Tag Library )
  - 자바코드 대신 태그로 웹페이지 작성
  - before : <%=if()  %>
  - after : <c:if test=></c:if> / <c:forEach itmes="" var=""></c:forEach>

-1.  반복문, 조건문 등의 기본구현
-2.  사용법
 1. http://jakarta.apache.org/
 2. 왼쪽메뉴 :  Taglibs
 3. Standard Taglib -  다운로드 - jakarta-taglibs-standard-1.1.1.zip
 4. [WEB-INF]-[lib] - jstl.jar / standard.jar

<%@taglib  prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>

-3. jstl 라이브러리
  core : 기본적인 기능제공
  fmt  : format 형식
  xml  : xml관련처리
  sql  : sql관련처리

2. admin만 글쓰기 (session 정리)

3. Naver api
[com.company.util] - NaverBook.java

4. ajax
